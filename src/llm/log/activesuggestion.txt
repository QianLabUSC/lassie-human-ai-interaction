The normal procedure to finish one soup is:
1. Pick up the required ingredients 
2. Put ingredients into pots.
3. start cook the soup.
4. Pick up a dish.
5. pick up the soup after it is ready.
6. Put the soup to the serve location.

Remember, you must put the all ingredients and correct ingredients exactly as specified in the recipe book, a important thing that you have to 
put the soup to the serve location
Recipe book:
Recipe 0: Requires 3 ingredients: onion, onion, tomato. The ingredients should be placed in a pot and start cook to make the soup. After that, you have pick up the dishes, and pick up soup from pot, send soup to the serve counter.

=====================
Kitchen state:
X is counter, P is pot, D is dish dispenser, O is onion dispenser, T is tomato dispenser, S is delivery location, empty square is empty square, 1 is you and 0 is the other human chef, arrow is the direction agents are facing, ø is onion 
X       X       X       X       S       X       X       X       

X       ←1      ←0                                      X       

X               X       P{øø†✓  X       X       X       X       

T                       X       O                       X       

X               X               X       X               X       

X                                                       D       

X       X       X       X       X       X       X       X       


	0: Empty Counter at Location: (0, 0). Distance to you: 1.4142135623730951. Distance to human: 2.23606797749979
	1: Empty Counter at Location: (1, 0). Distance to you: 1.0. Distance to human: 1.4142135623730951
	2: Empty Counter at Location: (2, 0). Distance to you: 1.4142135623730951. Distance to human: 1.0
	3: Empty Counter at Location: (3, 0). Distance to you: 2.23606797749979. Distance to human: 1.4142135623730951
	4: Delivery location at Location: (4, 0). Distance to you: 3.1622776601683795. Distance to human: 2.23606797749979
	5: Empty Counter at Location: (5, 0). Distance to you: 4.123105625617661. Distance to human: 3.1622776601683795
	6: Empty Counter at Location: (6, 0). Distance to you: 5.0990195135927845. Distance to human: 4.123105625617661
	7: Empty Counter at Location: (7, 0). Distance to you: 6.082762530298219. Distance to human: 5.0990195135927845
	8: Empty Counter at Location: (0, 1). Distance to you: 1.0. Distance to human: 2.0
	9: Empty Counter at Location: (7, 1). Distance to you: 6.0. Distance to human: 5.0
	10: Empty Counter at Location: (0, 2). Distance to you: 1.4142135623730951. Distance to human: 2.23606797749979
	11: Empty Counter at Location: (2, 2). Distance to you: 1.4142135623730951. Distance to human: 1.0
	12: Pot at Location: (3, 2). Distance to you: 2.23606797749979. Distance to human: 1.4142135623730951The soup is finished cooking. There are 3 ingredients in this soup: tomato, onion, onion. 
	13: Empty Counter at Location: (4, 2). Distance to you: 3.1622776601683795. Distance to human: 2.23606797749979
	14: Empty Counter at Location: (5, 2). Distance to you: 4.123105625617661. Distance to human: 3.1622776601683795
	15: Empty Counter at Location: (6, 2). Distance to you: 5.0990195135927845. Distance to human: 4.123105625617661
	16: Empty Counter at Location: (7, 2). Distance to you: 6.082762530298219. Distance to human: 5.0990195135927845
	17: Tomato counter at Location: (0, 3). Distance to you: 2.23606797749979. Distance to human: 2.8284271247461903
	18: Empty Counter at Location: (3, 3). Distance to you: 2.8284271247461903. Distance to human: 2.23606797749979
	19: Onion counter at Location: (4, 3). Distance to you: 3.605551275463989. Distance to human: 2.8284271247461903
	20: Empty Counter at Location: (7, 3). Distance to you: 6.324555320336759. Distance to human: 5.385164807134504
	21: Empty Counter at Location: (0, 4). Distance to you: 3.1622776601683795. Distance to human: 3.605551275463989
	22: Empty Counter at Location: (2, 4). Distance to you: 3.1622776601683795. Distance to human: 3.0
	23: Empty Counter at Location: (4, 4). Distance to you: 4.242640687119285. Distance to human: 3.605551275463989
	24: Empty Counter at Location: (5, 4). Distance to you: 5.0. Distance to human: 4.242640687119285
	25: Empty Counter at Location: (7, 4). Distance to you: 6.708203932499369. Distance to human: 5.830951894845301
	26: Empty Counter at Location: (0, 5). Distance to you: 4.123105625617661. Distance to human: 4.47213595499958
	27: Dish counter at Location: (7, 5). Distance to you: 7.211102550927978. Distance to human: 6.4031242374328485
	28: Empty Counter at Location: (0, 6). Distance to you: 5.0990195135927845. Distance to human: 5.385164807134504
	29: Empty Counter at Location: (1, 6). Distance to you: 5.0. Distance to human: 5.0990195135927845
	30: Empty Counter at Location: (2, 6). Distance to you: 5.0990195135927845. Distance to human: 5.0
	31: Empty Counter at Location: (3, 6). Distance to you: 5.385164807134504. Distance to human: 5.0990195135927845
	32: Empty Counter at Location: (4, 6). Distance to you: 5.830951894845301. Distance to human: 5.385164807134504
	33: Empty Counter at Location: (5, 6). Distance to you: 6.4031242374328485. Distance to human: 5.830951894845301
	34: Empty Counter at Location: (6, 6). Distance to you: 7.0710678118654755. Distance to human: 6.4031242374328485
	35: Empty Counter at Location: (7, 6). Distance to you: 7.810249675906654. Distance to human: 7.0710678118654755
=====================


Current graph: 
{'vertex': [{'id': 0, 'name': '0:Get onion', 'target_position': array([[4, 3]]), 'task_type': 'getting', 'parent_subtasks': [], 'next_subtasks': [1], 'status': 'success'}, {'id': 1, 'name': '1:Put onion into pot', 'target_position': array([[3, 2]]), 'task_type': 'putting', 'parent_subtasks': [0], 'next_subtasks': [6], 'status': 'success'}, {'id': 2, 'name': '2:Get onion', 'target_position': array([[4, 3]]), 'task_type': 'getting', 'parent_subtasks': [], 'next_subtasks': [3], 'status': 'success'}, {'id': 3, 'name': '3:Put onion into pot', 'target_position': array([[3, 2]]), 'task_type': 'putting', 'parent_subtasks': [2], 'next_subtasks': [6], 'status': 'success'}, {'id': 4, 'name': '4:Get tomato', 'target_position': array([[0, 3]]), 'task_type': 'getting', 'parent_subtasks': [], 'next_subtasks': [5], 'status': 'success'}, {'id': 5, 'name': '5:Put tomato into pot', 'target_position': array([[3, 2]]), 'task_type': 'putting', 'parent_subtasks': [4], 'next_subtasks': [6], 'status': 'success'}, {'id': 6, 'name': '6:Start cooking soup', 'target_position': array([[3, 2]]), 'task_type': 'operating', 'parent_subtasks': [1, 3, 5], 'next_subtasks': [8], 'status': 'success'}, {'id': 7, 'name': '7:Get dish', 'target_position': array([[7, 5]]), 'task_type': 'getting', 'parent_subtasks': [], 'next_subtasks': [8], 'status': 'executing'}, {'id': 8, 'name': '8:Pick up soup from pot', 'target_position': array([[3, 2]]), 'task_type': 'putting', 'parent_subtasks': [6, 7], 'next_subtasks': [9], 'status': 'not_ready'}, {'id': 9, 'name': '9:Serve soup', 'target_position': array([[4, 0]]), 'task_type': 'putting', 'parent_subtasks': [8], 'next_subtasks': [], 'status': 'not_ready'}], 'edge': [('0:Get onion', '1:Put onion into pot'), ('2:Get onion', '3:Put onion into pot'), ('4:Get tomato', '5:Put tomato into pot'), ('1:Put onion into pot', '6:Start cooking soup'), ('3:Put onion into pot', '6:Start cooking soup'), ('5:Put tomato into pot', '6:Start cooking soup'), ('6:Start cooking soup', '8:Pick up soup from pot'), ('7:Get dish', '8:Pick up soup from pot'), ('8:Pick up soup from pot', '9:Serve soup')]}


Analyze the environment layout and the current generated graph, analyze if there existing path cost between each subtask node is too high and thus the human and robot can collaborate to finish together, 
that will reduce the cost, e.g. the robot could put ingredient or dishes into a certain empty couter, please indicate locations and human can pick up it from here
Or if there will be tricks/preferences when assigning subtasks, like always assign a certain group of subtasks into human or robot will reduce the overall cost, give specific plans. 
Return the suggestio as a short sentence into two variables, coordinator_suggestion for the first type, and preference_suggestion for the second type. 